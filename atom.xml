<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://loycine.github.io</id>
    <title>罗宇成的博客</title>
    <updated>2022-04-26T07:14:33.762Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://loycine.github.io"/>
    <link rel="self" href="https://loycine.github.io/atom.xml"/>
    <subtitle>大家好，这是我的博客，它记录了过去的点点滴滴，也希望能给大家带来一定的帮助。</subtitle>
    <logo>https://loycine.github.io/images/avatar.png</logo>
    <icon>https://loycine.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 罗宇成的博客</rights>
    <entry>
        <title type="html"><![CDATA[C++内存泄漏检测]]></title>
        <id>https://loycine.github.io/post/cnei-cun-xie-lou-jian-ce/</id>
        <link href="https://loycine.github.io/post/cnei-cun-xie-lou-jian-ce/">
        </link>
        <updated>2022-04-26T07:14:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="addresssanitizer">AddressSanitizer</h2>
<p>g++ -fsanitize=address -fsanitize=leak  test.cpp -o test</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Typora的使用技巧]]></title>
        <id>https://loycine.github.io/post/typora-de-shi-yong-ji-qiao/</id>
        <link href="https://loycine.github.io/post/typora-de-shi-yong-ji-qiao/">
        </link>
        <updated>2022-04-25T02:36:24.000Z</updated>
        <content type="html"><![CDATA[<p>ctrl+/，这是切换源代码模式，然后赋值粘贴，再按一次可以切换为格式模式。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++和Python相互调用]]></title>
        <id>https://loycine.github.io/post/che-python-xiang-hu-diao-yong/</id>
        <link href="https://loycine.github.io/post/che-python-xiang-hu-diao-yong/">
        </link>
        <updated>2022-04-22T02:25:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-c调用python">1、C++调用Python</h1>
<h2 id="11-背景">1.1、 背景</h2>
<p>最近实验室有一个项目要用遗传算法和粒子群算法解决问题，但是没有找到在windows上合适的C++库，但是Python的库很多（例如说pymoo： Multi-objective Optimization in Python），所以决定采用在C++中嵌入python解释器的方法，使用C++调用Python的接口。</p>
<h2 id="12-环境安装">1.2、环境安装</h2>
<h3 id="安装python到指定文件夹">安装Python到指定文件夹</h3>
<p>在Windows内离线部署python：<br>
https://www.python.org/ftp/python<br>
这里选择的是3.8.9版本：<br>
https://www.python.org/ftp/python/3.8.9/python-3.8.9-amd64.exe<br>
然后选择安装到指定文件夹的Python38目录下。</p>
<h3 id="安装python第三方库">安装Python第三方库</h3>
<p>pip安装环境依赖<br>
根据pymoo的指引进行安装，因为github访问不稳定，可以使用proxychains4代理。</p>
<pre><code class="language-bash">git clone https://github.com/anyoptimization/pymoo
</code></pre>
<p>现在目录格式像这样：</p>
<pre><code class="language-bash">.
├── Python38
│   ├── DLLs
│   ├── Doc
│   ├── LICENSE.txt
│   ├── Lib
│   ├── NEWS.txt
│   ├── Scripts
│   ├── Tools
│   ├── include
│   ├── libs
│   ├── python.exe
│   ├── python3.dll
│   ├── python38.dll
│   ├── pythonw.exe
│   ├── share
│   ├── tcl
│   ├── vcruntime140.dll
│   └── vcruntime140_1.dll
└── pymoo
    ├── LICENSE
    ├── MANIFEST.in
    ├── Makefile
    ├── README.rst
    ├── data
    ├── pymoo
    ├── setup.py
    └── tests
</code></pre>
<p>执行以下命令安装环境</p>
<pre><code class="language-bash">cd pymoo
 ..\Python38\python.exe -m pip install .
</code></pre>
<h3 id="调试环境">调试环境</h3>
<p>如果需要在Debug方式下运行，需要将Python38目录下libs目录下的python38.lib copy一份，重命名为python38_d.lib，即可以使用。</p>
<h3 id="编译设置">编译设置</h3>
<p>将Python38/include目录设置为包含目录。<br>
将Python38/libs设置为库目录。<br>
将Python38.dll拷贝一份到执行文件的目录下。</p>
<h2 id="13-编程开发">1.3、编程开发</h2>
<h3 id="python的相关接口">Python的相关接口</h3>
<pre><code class="language-python">'''
Problem defination
Problem link: https://www.pymoo.org/getting_started/part_2.html
\begin{align}
\label{eq:getting_started_pymoo}
\begin{split}
\min \;\; &amp; f_1(x) = 100 \, (x_1^2 + x_2^2) \\
\min \;\; &amp; f_2(x) = (x_1-1)^2 + x_2^2 \\[1mm]
\text{s.t.} \;\; &amp; g_1(x) = 2 \, (x_1 - 0.1) \, (x_1 - 0.9)  \, /  \,  0.18 \leq 0\\
&amp; g_2(x) = - 20 \, (x_1 - 0.4) \, (x_1 - 0.6) \,  /  \,  4.8 \leq 0\\[1mm]
&amp; -2 \leq x_1 \leq 2 \\
&amp; -2 \leq x_2 \leq 2\\[1mm]
&amp; x \in \mathbb{R}
\end{split}
\end{align}
'''
import numpy as np
from pymoo.core.problem import ElementwiseProblem

class MyProblem(ElementwiseProblem):

    def __init__(self):
        super().__init__(n_var=2,
                         n_obj=2,
                         n_constr=2,
                         xl=np.array([-2,-2]),
                         xu=np.array([2,2]))

    def _evaluate(self, x, out, *args, **kwargs):
        f1 = 100 * (x[0]**2 + x[1]**2)
        f2 = (x[0]-1)**2 + x[1]**2

        g1 = 2*(x[0]-0.1) * (x[0]-0.9) / 0.18
        g2 = - 20*(x[0]-0.4) * (x[0]-0.6) / 4.8

        out[&quot;F&quot;] = [f1, f2]
        out[&quot;G&quot;] = [g1, g2]


# Define a Algorithm
from pymoo.algorithms.moo.nsga2 import NSGA2
from pymoo.factory import get_sampling, get_crossover, get_mutation

 
# Define a Termination Criterion
from pymoo.factory import get_termination


#Optimize
from pymoo.optimize import minimize


def run():
    problem = MyProblem()
    
    algorithm = NSGA2(
        pop_size=40,
        n_offsprings=10,
        sampling=get_sampling(&quot;real_random&quot;),
        crossover=get_crossover(&quot;real_sbx&quot;, prob=0.9, eta=15),
        mutation=get_mutation(&quot;real_pm&quot;, eta=20),
        eliminate_duplicates=True
    )
    
    termination = get_termination(&quot;n_gen&quot;, 40)
    
    res = minimize(problem,
               algorithm,
               termination,
               seed=1,
               save_history=True,
               verbose=True)
    X = res.X.tolist()
    F = res.F.tolist()
    # print(res.X)
    # print(res.F)
    return X, F
</code></pre>
<h3 id="c调用python和相关的类型转换">C++调用Python和相关的类型转换</h3>
<pre><code class="language-c++">#include &lt;Python.h&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
using namespace std;


vector&lt;vector&lt;double&gt;&gt; list2DToVector2D(PyObject* pReturn) {
	vector&lt;vector&lt;double&gt;&gt; ret;
	if (PyList_Check(pReturn)) { 
		int SizeOfList = PyList_Size(pReturn);
		for (int i = 0; i &lt; SizeOfList; i++) {
			PyObject* ListItem = PyList_GetItem(pReturn, i);

			int NumOfItems = PyList_Size(ListItem);
			vector&lt;double&gt; temp;
			for (int j = 0; j &lt; NumOfItems; j++) {
				PyObject* Item = PyList_GetItem(ListItem, j);
				double result;
				PyArg_Parse(Item, &quot;d&quot;, &amp;result);
				temp.push_back(result);
			}
			ret.push_back(temp);
		}
	}
	else {
		cout &lt;&lt; &quot;parse_two_dimension_list error&quot; &lt;&lt; endl; 
	}
	return ret;
}

void showVector2D(vector&lt;vector&lt;double&gt;&gt; v) {
	for (int i = 0; i &lt; v.size(); i++) {
		auto&amp; vv = v[i];
		for (int j = 0; j &lt; vv.size(); j++) {
			cout &lt;&lt; vv[j] &lt;&lt; &quot; &quot;;
		}
		cout &lt;&lt; &quot;\n&quot;;
	}
}
void do_multi_objective_optimization()
{
	vector&lt;vector&lt;double&gt;&gt; X;
	vector&lt;vector&lt;double&gt;&gt; Y;

	PyObject* pModule = NULL;
	PyObject* pFunc = NULL;
	PyObject* pDict = NULL;
	PyObject* pReturn = NULL;

	if (0 == Py_IsInitialized())
	{
		cout &lt;&lt; &quot;Initialize error\n&quot;;
		return;
	}

	pModule = PyImport_ImportModule(&quot;multi-objective-optimization&quot;);
	if (!pModule) {
		cout &lt;&lt; &quot;load error\n&quot;;
		return;
	}
	pDict = PyModule_GetDict(pModule);
	pFunc = PyDict_GetItemString(pDict, &quot;run&quot;);
	
	
	pReturn = PyEval_CallObject(pFunc, NULL);
	
	if (PyTuple_Check(pReturn)) {
		int sizeOfTuple = PyTuple_Size(pReturn);
		if (sizeOfTuple == 2) {
			PyObject* Item;
			Item = PyTuple_GetItem(pReturn, 0);
			X = list2DToVector2D(Item);
			Item = PyTuple_GetItem(pReturn, 1);
			Y = list2DToVector2D(Item);
		}
	}
	else {
		cout &lt;&lt; &quot;Not a Tuple&quot; &lt;&lt; endl;
	}

	Py_DECREF(pReturn);
	Py_DECREF(pModule);
    
	showVector2D(X);
	showVector2D(Y);
}


int main()
{
	Py_SetPythonHome(L&quot;D:\\Code\\cpp_py_interpreter\\Python38&quot;);
	Py_Initialize();
	do_multi_objective_optimization();
	Py_Finalize();
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vscode环境配置]]></title>
        <id>https://loycine.github.io/post/vscode-huan-jing-pei-zhi/</id>
        <link href="https://loycine.github.io/post/vscode-huan-jing-pei-zhi/">
        </link>
        <updated>2022-04-11T03:54:13.000Z</updated>
        <content type="html"><![CDATA[<h1 id="vscode锁无法获取">vscode锁无法获取</h1>
<p>vscode也存在一定的坑，例如说：<br>
Server installation process already in progress - waiting and retrying<br>
Acquiring lock on ~/.vscode-server/bin/<br>
一般的解决方法就是删除bin目录，然后重新下载，这是因为不同电脑的vscode版本可能不同，如果不同版本的vscode同样来连接服务器，就会存在一些锁的问题。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[科研小站-conda，pip配置镜像源（3）]]></title>
        <id>https://loycine.github.io/post/ke-yan-xiao-zhan-condapip-pei-zhi-jing-xiang-yuan-3/</id>
        <link href="https://loycine.github.io/post/ke-yan-xiao-zhan-condapip-pei-zhi-jing-xiang-yuan-3/">
        </link>
        <updated>2022-03-28T03:59:14.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-bash">pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/

pip config set install.trusted-host https://mirrors.aliyun.com
</code></pre>
<pre><code class="language-bash">python -m pip install --upgrade pip
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[科研小站-VLN Simulator的环境配置（2）]]></title>
        <id>https://loycine.github.io/post/ke-yan-xiao-zhan-vln-simulator-de-huan-jing-pei-zhi-2/</id>
        <link href="https://loycine.github.io/post/ke-yan-xiao-zhan-vln-simulator-de-huan-jing-pei-zhi-2/">
        </link>
        <updated>2021-11-24T03:17:41.000Z</updated>
        <content type="html"><![CDATA[<p>VLN（Vision and language Navigation）的任务中常常需要使用simulator。</p>
<pre><code class="language-python">import sys
sys.path.append('Matterport3DSimulator/build')
import MatterSim
</code></pre>
<p>也就是说我们要在python中加载MatterSim.cpython-38-x86_64-linux-gnu.so<br>
因为目前conda环境是在Ceph上，如果报错的话，只可能是系统中的有些包未安装或者未匹配。</p>
<p>例如说，遇到 libGLEW.so.2.1: cannot open shared object file.<br>
那我们主要去看libGLEW安装的问题：</p>
<pre><code class="language-bash">dpkg -S libGLEW
libglew-dev:amd64: /usr/lib/x86_64-linux-gnu/libGLEW.so
libglew2.1:amd64: /usr/lib/x86_64-linux-gnu/libGLEW.so.2.1
libglew2.1:amd64: /usr/lib/x86_64-linux-gnu/libGLEW.so.2.1.0
</code></pre>
<pre><code class="language-bash">sudo apt install libglew2.1
</code></pre>
<p>更全面一点，我们可以看库中全部的依赖：</p>
<pre><code class="language-python">ldd MatterSim.cpython-38-x86_64-linux-gnu.so
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[技术小站-如何下网页上的视频（1）]]></title>
        <id>https://loycine.github.io/post/ji-zhu-xiao-zhan-ru-he-xia-wang-ye-shang-de-shi-pin/</id>
        <link href="https://loycine.github.io/post/ji-zhu-xiao-zhan-ru-he-xia-wang-ye-shang-de-shi-pin/">
        </link>
        <updated>2021-11-04T08:55:34.000Z</updated>
        <content type="html"><![CDATA[<p>在网页上能看到的视频，一般都是可以下载到的。</p>
<ol>
<li>按F12，打开浏览器控制台。</li>
<li>选择到Network项，并在Filter那一栏选择Media。</li>
<li>选中正在播放的视频，右键，选择Copy，选择Copy as cURL(bash)</li>
</ol>
<pre><code>curl 'https://yunluzhi-az-1258344699.file.myqcloud.com/cos/200000001/1452892568504299520/1452892568504299521/TM-20211026133701-775823750-recording-1.mp4?token=XXXX' \
  -H 'authority: yunluzhi-az-1258344699.file.myqcloud.com' \
  -H 'sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;' \
  -H 'sec-ch-ua-mobile: ?0' \
  -H 'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36' \
  -H 'sec-ch-ua-platform: &quot;Windows&quot;' \
  -H 'accept: */*' \
  -H 'sec-fetch-site: cross-site' \
  -H 'sec-fetch-mode: no-cors' \
  -H 'sec-fetch-dest: video' \
  -H 'referer: https://meeting.tencent.com/' \
  -H 'accept-language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en;q=0.7' \
  -H 'range: bytes=0-' \
  --compressed
</code></pre>
<p>然后这就是bash里的内容，视频常常是按段播放的，这里把Header中的range字段删去。<br>
然后在Windows里的WSL里就可以进行下载啦。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[科研小站-vscode调试篇（1）]]></title>
        <id>https://loycine.github.io/post/ke-yan-xiao-zhan-vscode-diao-shi-pian-1/</id>
        <link href="https://loycine.github.io/post/ke-yan-xiao-zhan-vscode-diao-shi-pian-1/">
        </link>
        <updated>2021-09-16T02:41:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="生成调试配置文件launchjson">生成调试配置文件launch.json</h2>
<p>首先点击运行符号和甲壳虫符号-运行，生成python的配置文件</p>
<pre><code class="language-json">{
    // 使用 IntelliSense 了解相关属性。 
    // 悬停以查看现有属性的描述。
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
    &quot;version&quot;: &quot;0.2.0&quot;,
    &quot;configurations&quot;: [
        {
            &quot;name&quot;: &quot;Python: ckr&quot;,
            &quot;type&quot;: &quot;python&quot;,
            &quot;request&quot;: &quot;launch&quot;,
            &quot;program&quot;: &quot;train.py&quot;,
            &quot;args&quot;: [&quot;--experiment_name&quot;,&quot;check-train-1&quot;,&quot;--feedback_method&quot;,&quot;sample2step&quot;,&quot;--instruction_from&quot;,&quot;reverie&quot;,&quot;--batch_size=100&quot;,&quot;--en_nhead&quot;,&quot;6&quot;,&quot;--en_nlayer&quot;,&quot;2&quot;,&quot;--use_glove&quot;,&quot;--num_multihead&quot;,&quot;8&quot;,&quot;--num_layer&quot;,&quot;4&quot;,&quot;--max_degree&quot;,&quot;15&quot;,&quot;--object_top_n&quot;,&quot;5&quot;,&quot;--short_cut&quot;,&quot;--num_gcn&quot;,&quot;3&quot;,&quot;--use_angle_distance_reward&quot;,&quot;--soft_room_label&quot;,&quot;--loss_weight&quot;,&quot;5&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;],
            &quot;env&quot;: {&quot;CUDA_VISIBLE_DEVICES&quot;: &quot;0&quot;},
            &quot;console&quot;: &quot;integratedTerminal&quot;
        }
    ]
}
</code></pre>
<p>其中name是随意取的，program是要运行的文件，args是运行的参数，env是运行的环境变量。</p>
<h2 id="对args进行处理">对args进行处理</h2>
<p>args要是字符串数组，字符串要用引号包括，用逗号分割，这就需要我们对命令行参数进行处理。</p>
<pre><code class="language-bash">python train.py
--experiment_name check-train-1
--feedback_method sample2step --instruction_from reverie --batch_size=100
--en_nhead 6 --en_nlayer 2 --use_glove
--num_multihead 8 --num_layer 4
--max_degree 15 --object_top_n 5 --short_cut --num_gcn 3
--use_angle_distance_reward --soft_room_label
--loss_weight 5 1 0 1'
</code></pre>
<ol>
<li>vscode按住 shift+alt+鼠标左键，进行连续多行编辑，将所有行数转为一行，并转换为空格隔开。</li>
<li>vscode中按 alt+z，开启自动换行，使得所有内容可见</li>
<li>vscode里圈中空格，然后按control+d，选择所有空格，进行多位置编辑，改成&quot;,&quot;</li>
<li>在首尾添加&quot;，大功告成</li>
</ol>
<h2 id="调试运行时">调试运行时</h2>
<ol>
<li>可以设置断点并查看所有断点问题</li>
<li>可以随时中断并查看调用堆栈</li>
<li>可以step in  step out  step over  continue四按钮，在python里step in不会进入标准库中，如果不小心进入函数，可以step out跳出，如果不想进入函数，可以使用step over。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[似水青春踏年华]]></title>
        <id>https://loycine.github.io/post/wo-de-qing-mei-zhu-ma-si-shui-qing-chun-ta-nian-hua/</id>
        <link href="https://loycine.github.io/post/wo-de-qing-mei-zhu-ma-si-shui-qing-chun-ta-nian-hua/">
        </link>
        <updated>2021-07-22T15:11:14.000Z</updated>
        <content type="html"><![CDATA[<p>童稚时代，无忧无虑，数学英语小荷才露尖尖角。</p>
<p>诗词年华：重视语文和才艺。为赋新词强说恋爱。数学英语进一步加强，成为强势科目。</p>
<p>青春见习：大学时期认识全国各地的同学，大一大二重点修习课业，大三在帮老师做实验室项目和两端暑期实习</p>
<p>深切反思：大四时期。思考自己除了技能，还应该有什么样的生活和爱情。总结出身体，硬实力，软实力三要素。</p>
<p>全面社交：研一时期，开眼看世界，利用所有可以社交的机会去学习和人相处，参加各种学生组织和心理咨询。</p>
<p>20岁改革，准确地说是22岁改革，旨在建设更好的身体，并留出足够多的时间。这项改革可能会影响我的一生。<br>
可是改革只是决定了时间的空余，改革解放的时间具体要怎么利用，如何锻炼更好的身体，还是要自己考虑。</p>
<ol>
<li>ACM题一定要下数据集或者跑模型的时候再做。</li>
<li>学习视频也一定要在上述两点的空余时间再看。</li>
<li>拿下VLN，闲暇时间做做SLAM，以成毕业论文。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[技能点]]></title>
        <id>https://loycine.github.io/post/ji-neng-dian/</id>
        <link href="https://loycine.github.io/post/ji-neng-dian/">
        </link>
        <updated>2021-07-22T07:59:41.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>熟练使用科学上网 v2ray, shadowsocks,shadowsocksr, ss-local, sslocal ，proxychains</li>
<li>vim的使用，set paste set nopaste set pastetoggle=<F11>，调整粘贴模式才能更好地复制粘贴</li>
</ol>
]]></content>
    </entry>
</feed>