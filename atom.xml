<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://loycine.github.io</id>
    <title>罗宇成的博客</title>
    <updated>2022-03-28T04:00:45.127Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://loycine.github.io"/>
    <link rel="self" href="https://loycine.github.io/atom.xml"/>
    <subtitle>大家好，这是我的博客，它记录了过去的点点滴滴，也希望能给大家带来一定的帮助。</subtitle>
    <logo>https://loycine.github.io/images/avatar.png</logo>
    <icon>https://loycine.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 罗宇成的博客</rights>
    <entry>
        <title type="html"><![CDATA[科研小站-conda，pip配置镜像源（3）]]></title>
        <id>https://loycine.github.io/post/ke-yan-xiao-zhan-condapip-pei-zhi-jing-xiang-yuan-3/</id>
        <link href="https://loycine.github.io/post/ke-yan-xiao-zhan-condapip-pei-zhi-jing-xiang-yuan-3/">
        </link>
        <updated>2022-03-28T03:59:14.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-bash">pip config set global.index-url https://mirrors.aliyun.com/pypi/simple/

pip config set install.trusted-host https://mirrors.aliyun.com
</code></pre>
<pre><code class="language-bash">python -m pip install --upgrade pip
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[科研小站-VLN Simulator的环境配置（2）]]></title>
        <id>https://loycine.github.io/post/ke-yan-xiao-zhan-vln-simulator-de-huan-jing-pei-zhi-2/</id>
        <link href="https://loycine.github.io/post/ke-yan-xiao-zhan-vln-simulator-de-huan-jing-pei-zhi-2/">
        </link>
        <updated>2021-11-24T03:17:41.000Z</updated>
        <content type="html"><![CDATA[<p>VLN（Vision and language Navigation）的任务中常常需要使用simulator。</p>
<pre><code class="language-python">import sys
sys.path.append('Matterport3DSimulator/build')
import MatterSim
</code></pre>
<p>也就是说我们要在python中加载MatterSim.cpython-38-x86_64-linux-gnu.so<br>
因为目前conda环境是在Ceph上，如果报错的话，只可能是系统中的有些包未安装或者未匹配。</p>
<p>例如说，遇到 libGLEW.so.2.1: cannot open shared object file.<br>
那我们主要去看libGLEW安装的问题：</p>
<pre><code class="language-bash">dpkg -S libGLEW
libglew-dev:amd64: /usr/lib/x86_64-linux-gnu/libGLEW.so
libglew2.1:amd64: /usr/lib/x86_64-linux-gnu/libGLEW.so.2.1
libglew2.1:amd64: /usr/lib/x86_64-linux-gnu/libGLEW.so.2.1.0
</code></pre>
<pre><code class="language-bash">sudo apt install libglew2.1
</code></pre>
<p>更全面一点，我们可以看库中全部的依赖：</p>
<pre><code class="language-python">ldd MatterSim.cpython-38-x86_64-linux-gnu.so
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[技术小站-如何下网页上的视频（1）]]></title>
        <id>https://loycine.github.io/post/ji-zhu-xiao-zhan-ru-he-xia-wang-ye-shang-de-shi-pin/</id>
        <link href="https://loycine.github.io/post/ji-zhu-xiao-zhan-ru-he-xia-wang-ye-shang-de-shi-pin/">
        </link>
        <updated>2021-11-04T08:55:34.000Z</updated>
        <content type="html"><![CDATA[<p>在网页上能看到的视频，一般都是可以下载到的。</p>
<ol>
<li>按F12，打开浏览器控制台。</li>
<li>选择到Network项，并在Filter那一栏选择Media。</li>
<li>选中正在播放的视频，右键，选择Copy，选择Copy as cURL(bash)</li>
</ol>
<pre><code>curl 'https://yunluzhi-az-1258344699.file.myqcloud.com/cos/200000001/1452892568504299520/1452892568504299521/TM-20211026133701-775823750-recording-1.mp4?token=XXXX' \
  -H 'authority: yunluzhi-az-1258344699.file.myqcloud.com' \
  -H 'sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;95&quot;, &quot;Chromium&quot;;v=&quot;95&quot;, &quot;;Not A Brand&quot;;v=&quot;99&quot;' \
  -H 'sec-ch-ua-mobile: ?0' \
  -H 'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36' \
  -H 'sec-ch-ua-platform: &quot;Windows&quot;' \
  -H 'accept: */*' \
  -H 'sec-fetch-site: cross-site' \
  -H 'sec-fetch-mode: no-cors' \
  -H 'sec-fetch-dest: video' \
  -H 'referer: https://meeting.tencent.com/' \
  -H 'accept-language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en;q=0.7' \
  -H 'range: bytes=0-' \
  --compressed
</code></pre>
<p>然后这就是bash里的内容，视频常常是按段播放的，这里把Header中的range字段删去。<br>
然后在Windows里的WSL里就可以进行下载啦。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[科研小站-vscode调试篇（1）]]></title>
        <id>https://loycine.github.io/post/ke-yan-xiao-zhan-vscode-diao-shi-pian-1/</id>
        <link href="https://loycine.github.io/post/ke-yan-xiao-zhan-vscode-diao-shi-pian-1/">
        </link>
        <updated>2021-09-16T02:41:07.000Z</updated>
        <content type="html"><![CDATA[<h2 id="生成调试配置文件launchjson">生成调试配置文件launch.json</h2>
<p>首先点击运行符号和甲壳虫符号-运行，生成python的配置文件</p>
<pre><code class="language-json">{
    // 使用 IntelliSense 了解相关属性。 
    // 悬停以查看现有属性的描述。
    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387
    &quot;version&quot;: &quot;0.2.0&quot;,
    &quot;configurations&quot;: [
        {
            &quot;name&quot;: &quot;Python: ckr&quot;,
            &quot;type&quot;: &quot;python&quot;,
            &quot;request&quot;: &quot;launch&quot;,
            &quot;program&quot;: &quot;train.py&quot;,
            &quot;args&quot;: [&quot;--experiment_name&quot;,&quot;check-train-1&quot;,&quot;--feedback_method&quot;,&quot;sample2step&quot;,&quot;--instruction_from&quot;,&quot;reverie&quot;,&quot;--batch_size=100&quot;,&quot;--en_nhead&quot;,&quot;6&quot;,&quot;--en_nlayer&quot;,&quot;2&quot;,&quot;--use_glove&quot;,&quot;--num_multihead&quot;,&quot;8&quot;,&quot;--num_layer&quot;,&quot;4&quot;,&quot;--max_degree&quot;,&quot;15&quot;,&quot;--object_top_n&quot;,&quot;5&quot;,&quot;--short_cut&quot;,&quot;--num_gcn&quot;,&quot;3&quot;,&quot;--use_angle_distance_reward&quot;,&quot;--soft_room_label&quot;,&quot;--loss_weight&quot;,&quot;5&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;],
            &quot;env&quot;: {&quot;CUDA_VISIBLE_DEVICES&quot;: &quot;0&quot;},
            &quot;console&quot;: &quot;integratedTerminal&quot;
        }
    ]
}
</code></pre>
<p>其中name是随意取的，program是要运行的文件，args是运行的参数，env是运行的环境变量。</p>
<h2 id="对args进行处理">对args进行处理</h2>
<p>args要是字符串数组，字符串要用引号包括，用逗号分割，这就需要我们对命令行参数进行处理。</p>
<pre><code class="language-bash">python train.py
--experiment_name check-train-1
--feedback_method sample2step --instruction_from reverie --batch_size=100
--en_nhead 6 --en_nlayer 2 --use_glove
--num_multihead 8 --num_layer 4
--max_degree 15 --object_top_n 5 --short_cut --num_gcn 3
--use_angle_distance_reward --soft_room_label
--loss_weight 5 1 0 1'
</code></pre>
<ol>
<li>vscode按住 shift+alt+鼠标左键，进行连续多行编辑，将所有行数转为一行，并转换为空格隔开。</li>
<li>vscode中按 alt+z，开启自动换行，使得所有内容可见</li>
<li>vscode里圈中空格，然后按control+d，选择所有空格，进行多位置编辑，改成&quot;,&quot;</li>
<li>在首尾添加&quot;，大功告成</li>
</ol>
<h2 id="调试运行时">调试运行时</h2>
<ol>
<li>可以设置断点并查看所有断点问题</li>
<li>可以随时中断并查看调用堆栈</li>
<li>可以step in  step out  step over  continue四按钮，在python里step in不会进入标准库中，如果不小心进入函数，可以step out跳出，如果不想进入函数，可以使用step over。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[似水青春踏年华]]></title>
        <id>https://loycine.github.io/post/wo-de-qing-mei-zhu-ma-si-shui-qing-chun-ta-nian-hua/</id>
        <link href="https://loycine.github.io/post/wo-de-qing-mei-zhu-ma-si-shui-qing-chun-ta-nian-hua/">
        </link>
        <updated>2021-07-22T15:11:14.000Z</updated>
        <content type="html"><![CDATA[<p>童稚时代，无忧无虑，数学英语小荷才露尖尖角。</p>
<p>诗词年华：重视语文和才艺。为赋新词强说恋爱。数学英语进一步加强，成为强势科目。</p>
<p>青春见习：大学时期认识全国各地的同学，大一大二重点修习课业，大三在帮老师做实验室项目和两端暑期实习</p>
<p>深切反思：大四时期。思考自己除了技能，还应该有什么样的生活和爱情。总结出身体，硬实力，软实力三要素。</p>
<p>全面社交：研一时期，开眼看世界，利用所有可以社交的机会去学习和人相处，参加各种学生组织和心理咨询。</p>
<p>20岁改革，准确地说是22岁改革，旨在建设更好的身体，并留出足够多的时间。这项改革可能会影响我的一生。<br>
可是改革只是决定了时间的空余，改革解放的时间具体要怎么利用，如何锻炼更好的身体，还是要自己考虑。</p>
<ol>
<li>ACM题一定要下数据集或者跑模型的时候再做。</li>
<li>学习视频也一定要在上述两点的空余时间再看。</li>
<li>拿下VLN，闲暇时间做做SLAM，以成毕业论文。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[技能点]]></title>
        <id>https://loycine.github.io/post/ji-neng-dian/</id>
        <link href="https://loycine.github.io/post/ji-neng-dian/">
        </link>
        <updated>2021-07-22T07:59:41.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>熟练使用科学上网 v2ray, shadowsocks,shadowsocksr, ss-local, sslocal ，proxychains</li>
<li>vim的使用，set paste set nopaste set pastetoggle=<F11>，调整粘贴模式才能更好地复制粘贴</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ProgrammingContest - Python模板]]></title>
        <id>https://loycine.github.io/post/programmingcontest-python-mo-ban/</id>
        <link href="https://loycine.github.io/post/programmingcontest-python-mo-ban/">
        </link>
        <updated>2021-07-15T02:36:34.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="流程">流程</h1>
]]></summary>
        <content type="html"><![CDATA[<h1 id="流程">流程</h1>
<!-- more -->
<p>模拟C++ 中的main函数和全局变量机制</p>
<p>全局变量在外，输入输出在外，主体流程调用solve函数<br>
核心算法函数（如dfs，bfs）中记得global ans，来使用全局变量<br>
主体处理流程函数solve，以便快速return避免异常情况</p>
<h1 id="输入输出-mapint-input-split">输入输出 map(int, input ().split())</h1>
<h2 id="python和c的不同之处">Python和C++的不同之处</h2>
<h3 id="先來看看c">先來看看C++</h3>
<p>作为以前的C++参赛选手，对C++的更为熟悉，然而python有和C++的不同之处。C++的输入输出只要包括File IO 和 Std IO<br>
标准IO中有C++的版本cin, cout, getline(cin, line)，stringstream ss(line);<br>
C++连续多行读入然后进行拆分</p>
<pre><code class="language-cpp">string line;
int main()
{
    while(getline(cin,line))
    {
        stringstream ss(line);
        int x,sum=0;
        while(ss&gt;&gt;x) sum+=x;
        cout &lt;&lt; sum &lt;&lt; &quot;\n&quot;;
    }
}
</code></pre>
<p>也有C的版本scanf, printf,  c = getchar(),  都是以EOF机制作为结尾，fgets(line, strlen(line), stdin)以NULL作为结尾, putchar(c)</p>
<pre><code class="language-c">char line[100];
int main()
{
    while(fgets(line, sizeof(line), stdin))  
    {
        //fgets读入的字符串中带有\n，gets不带有但gets已经被C++11弃用
        int len = strlen(line);
        line[len-1] = '\0';
        puts(line);
    }
}
</code></pre>
<h3 id="差异性">差异性</h3>
<ol>
<li>C++中有EOF机制，python中实现EOF机制要使用异常或者sys模块。</li>
</ol>
<pre><code class="language-python"># 异常来解决EOF
while True:
    try:
        a = list(map(int, input().split()))
        print(a[0] + a[1])
    except EOFError:
        break
</code></pre>
<pre><code class="language-python"># sys.stdin简化EOF逻辑
import sys
for line in sys.stdin:
    a = line.split()
    print(int(a[0])+int(a[1]))
</code></pre>
<ol start="2">
<li>C++中是格式化读取，都是读取具体的变量，如int，浮点数，字符串，是细粒度的读取，还可以控制读取的位数。python中的input函数和sys.stdin都是按行读取，且都是字符串，要自己分割空格，要自己转换类型。<br>
不管是哪种方法，都可以对任何形式的输入进行处理。一次只能读取一行,返回值均为string类型的。<br>
即使数据是int类型的，他也会把得到的数字转化为字符串。这就需要我们自己对数据进行处理得到我们想要的数据基本类型。<br>
数据的处理通常依赖于strip()方法和split()方法。<br>
strip():去掉字符串首尾的指定字符，默认为换行符和空格。<br>
split():以某个字串或者字符拆分已有的字符串，默认情况以空格拆分。<br>
以后只以input为例</li>
</ol>
<ul>
<li>读取一行输入，用map生成可迭代对象</li>
</ul>
<pre><code class="language-python">n, m = map(int, input().split())
line = list(map(int, input().strip().split()))
</code></pre>
<ul>
<li>读取多行输入（指定行数）<br>
第一行为给定输入的大小，比如n行数，用n,m接收输入的大小<br>
用list接收下面输入的矩阵</li>
</ul>
<pre><code class="language-python">n, m = map(int, input().strip().split())
a = []
for i in range(n):
    a.append(list(map(int, input().strip().split())))
</code></pre>
<ul>
<li>读取多行输入（不指定行数）</li>
</ul>
<pre><code class="language-python">a = []
import sys
for line in sys.stdin:
    words =list(map(int, line.split()))
    a.append(words)
</code></pre>
<h1 id="题目示例">题目示例</h1>
<h2 id="huawei机试20210714">HUAWEI机试20210714</h2>
<pre><code class="language-python">m = int(input())
n = int(input())

mp = []
for i in range(m):
    line = input().strip().split()
    mp.append(line)

is_vis = [[0 for i in range(n)] for j in range(m)]

dx = [1, -1, 0, 0,1,-1]
dy = [0, 0, 1, -1,-1,1]

def dfs(cx, cy):
    history = [(cx, cy, 0)]
    while history:
        cx, cy, i = history.pop()

        is_vis[cy][cx] = 1
        nx = cx + dx[i]
        ny = cy + dy[i]
        i += 1
        if i &lt; 6:
            history.append((cx, cy, i))
        
        if(nx &gt;= n or nx &lt; 0 or ny &gt;= m or ny &lt; 0 or is_vis[ny][nx]):
            continue
        
        if(mp[ny][nx] == 'P'):
            continue

        history.append((nx, ny, 0))


cnt = 0
def solve():
    global cnt
    for j in range(m):
        for i in range(n):
            if not is_vis[j][i] and mp[j][i] == 'C':
                cnt = cnt + 1
                dfs(i, j)
                
solve()
print(cnt)
</code></pre>
<pre><code class="language-python">ans = 0

def dfs(start ,end):
    temp = start
    while(temp &lt; end):
        if(temp+1 == end):
            break
        if(s[temp+1] &lt; s[temp]):
            break
        start = temp
        temp = temp +1
    
    temp = end-1
    while(temp &gt;= start):
        if(temp-1 &lt; start):
            break
        if(s[temp-1] &lt; s[temp]):
            break
        end = temp
        temp = temp -1
        
    global ans
    if(end - start &lt;= 0):
        return
    if(end - start == 1):
        ans = ans + s[start]
        return
    
    min_num = 100000
    for i in range(start, end):
        min_num = min(min_num, s[i])
    for i in range(start, end):
        s[i] = s[i] - min_num
    ans = ans + min_num
    
    last = start
    for i in range(start, end):
        if(s[i] == 0):
            dfs(last, i)
            last = i+1
    dfs(last, end)

def solve():
    if(n == 0):
        print(-1)
        return
    for i in range(0, n):
        if(s[i] &lt; 0 or s[i] &gt; 100000):
            print(-1)
            return
    
    dfs(0, n)
    print(ans)

s = list(map(int, input().split()))
n = len(s)
solve()
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tmux列表维护]]></title>
        <id>https://loycine.github.io/post/tmux-lie-biao-wei-hu/</id>
        <link href="https://loycine.github.io/post/tmux-lie-biao-wei-hu/">
        </link>
        <updated>2021-07-14T03:28:21.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cpu0">cpu0</h1>
<table>
<thead>
<tr>
<th>Tmux</th>
<th>服务</th>
</tr>
</thead>
<tbody>
<tr>
<td>srv</td>
<td>部署ml-experiment服务</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[R2R:  Room-to-Room（R2R 数据集）]]></title>
        <id>https://loycine.github.io/post/r2r-room-to-roomr2r-shu-ju-ji/</id>
        <link href="https://loycine.github.io/post/r2r-room-to-roomr2r-shu-ju-ji/">
        </link>
        <updated>2021-07-13T03:37:30.000Z</updated>
        <content type="html"><![CDATA[<p>Vision-and-Language Navigation: Interpreting visually-grounded navigation instructions in real environment<br>
来自 澳大利亚阿德莱德大学，Vision-and-Language Navigation(VLN) 的一篇工作，发表在CVPR 2018。</p>
<ul>
<li>提出了Matterport3D Simulator，一个基于真实场景图的大规模强化学习环境。和之前的合成的强化学习环境相比，真实图像的环境更加具有视觉和语义多样性，可以最大化智能体迁移到真实场景应用的潜力。</li>
<li>基于提出的Matterport3D环境，本文提供了第一个基准数据集，Room-to-Room(R2R)，在真实建筑中VLN。该数据集包含21,567个词汇，平均句长29词的航行指令。和之前的vision-language任务相关的数据集相比，本数据集第一次考虑了agent的可移动和可控制摄像头这一点。而且本文使用的是全景图，而不是textured meshed纹理网格图，可以保留几何尤其是窗户和玻璃。</li>
<li>本文还提供了seq2seq的网络建立了baseline。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea博客搭建流程]]></title>
        <id>https://loycine.github.io/post/gridea-bo-ke-da-jian-liu-cheng/</id>
        <link href="https://loycine.github.io/post/gridea-bo-ke-da-jian-liu-cheng/">
        </link>
        <updated>2021-07-08T08:44:10.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="github-pages">Github Pages</h1>
<h2 id="创建仓库">创建仓库</h2>
<ul>
<li>首先在github新建一个用户名相同的仓库，用户名.github.io</li>
<li>然后在setting中确认自己的github已经开通了github服务。</li>
</ul>
<h2 id="创建token">创建token</h2>
<ul>
<li>github创建token，勾选上repo权限。</li>
</ul>
<h2 id="开启文章评论">开启文章评论</h2>
<ul>
<li>创建github OAuth Application，然后将Client ID和Client Secret复制到本地。</li>
</ul>
<h1 id="gridea客户端">Gridea客户端</h1>
<ul>
<li>在Gridea的配置-基础配置中填写相应的配置来配置同步。</li>
<li>在Gridea的配置-评论配置中填写相应的评论，评论是Gitalk的，是基于Github Issue和Preact开发的评论插件。</li>
</ul>
<h1 id="proxifier全局代理">Proxifier全局代理</h1>
<p>因为Gridea常常连不上Github，所以搭建Socks5代理然后搭建Proxifier进行远程同步。<br>
在Github中设置Profile- Proxy Servers 和 Profile- Proxification Rules。</p>
<h1 id="reference">Reference</h1>
<p>[1] <a href="https://zhuanlan.zhihu.com/p/71681116">Gridea 上手教程——小白也可以用的 GitHub Pages 搭建工具</a></p>
]]></content>
    </entry>
</feed>